package forcomp

import common._

object Anagrams {

  /** A word is simply a `String`. */
  type Word = String

  /** A sentence is a `List` of words. */
  type Sentence = List[Word]

  /** `Occurrences` is a `List` of pairs of characters and positive integers saying
   *  how often the character appears.
   *  This list is sorted alphabetically w.r.t. to the character in each pair.
   *  All characters in the occurrence list are lowercase.
   *  
   *  Any list of pairs of lowercase characters and their frequency which is not sorted
   *  is **not** an occurrence list.
   *  
   *  Note: If the frequency of some character is zero, then that character should not be
   *  in the list.
   */
  type Occurrences = List[(Char, Int)]

  /** The dictionary is simply a sequence of words.
   *  It is predefined and obtained as a sequence using the utility method `loadDictionary`.
   */
  val dictionary: List[Word] = loadDictionary

  /** Converts the word into its character occurence list.
   *  
   *  Note: the uppercase and lowercase version of the character are treated as the
   *  same character, and are represented as a lowercase character in the occurrence list.
   */
  def wordOccurrences(w: Word): Occurrences = {
		  w.groupBy(_.toLower).toList.sortWith((p1, p2) => p1._1 < p2._1).map(p=>(p._1, p._2.length))
  } 

  /** Converts a sentence into its character occurrence list. */
  def sentenceOccurrences(s: Sentence): Occurrences = {
    s.flatMap(wordOccurrences).groupBy(p=>p._1).toList.sortWith((p1, p2) => p1._1 < p2._1).map(p=>(p._1, p._2.length))
  }

  /** The `dictionaryByOccurrences` is a `Map` from different occurrences to a sequence of all
   *  the words that have that occurrence count.
   *  This map serves as an easy way to obtain all the anagrams of a word given its occurrence list.
   *  
   *  For example, the word "eat" has the following character occurrence list:
   *
   *     `List(('a', 1), ('e', 1), ('t', 1))`
   *
   *  Incidentally, so do the words "ate" and "tea".
   *
   *  This means that the `dictionaryByOccurrences` map will contain an entry:
   *
   *    List(('a', 1), ('e', 1), ('t', 1)) -> Seq("ate", "eat", "tea")
   *
   */
  lazy val dictionaryByOccurrences: Map[Occurrences, List[Word]] = dictionary.groupBy(wordOccurrences)

  /** Returns all the anagrams of a given word. */
  def wordAnagrams(word: Word): List[Word] = {
    dictionaryByOccurrences.getOrElse(wordOccurrences(word), List())
  }

  /** Returns the list of all subsets of the occurrence list.
   *  This includes the occurrence itself, i.e. `List(('k', 1), ('o', 1))`
   *  is a subset of `List(('k', 1), ('o', 1))`.
   *  It also include the empty subset `List()`.
   * 
   *  Example: the subsets of the occurrence list `List(('a', 2), ('b', 2))` are:
   *
   *    List(
   *      List(),
   *      List(('a', 1)),
   *      List(('a', 2)),
   *      List(('b', 1)),
   *      List(('a', 1), ('b', 1)),
   *      List(('a', 2), ('b', 1)),
   *      List(('b', 2)),
   *      List(('a', 1), ('b', 2)),
   *      List(('a', 2), ('b', 2))
   *    )
   *
   *  Note that the order of the occurrence list subsets does not matter -- the subsets
   *  in the example above could have been displayed in some other order.
   *  
   *  
   *  
   *  
   */
  
  type Combinations = List[Occurrences]
  
  def combinations(occurrences: Occurrences): Combinations = {
    if(occurrences.isEmpty) List(Nil)
    else {
      val previousList = combinations(occurrences.tail)
      def smallerPairs(pair:(Char, Int)):Occurrences = {
    	  (for(n <- 1 to pair._2) yield (pair._1, n)).toList
	  }
      previousList ::: smallerPairs(occurrences.head).flatMap(pair => previousList.map(pair :: _))
    }
  }

  /** Subtracts occurrence list `y` from occurrence list `x`.
   * 
   *  The precondition is that the occurrence list `y` is a subset of
   *  the occurrence list `x` -- any character appearing in `y` must
   *  appear in `x`, and its frequency in `y` must be smaller or equal
   *  than its frequency in `x`.
   *
   *  Note: the resulting value is an occurrence - meaning it is sorted
   *  and has no zero-entries.
   */
  def subtract(x: Occurrences, y: Occurrences): Occurrences = {
    def valToSubtract(c:Char):Int = {
      val matches = y.filter(_._1==c)
      if(matches.isEmpty) 0 else matches.head._2
    }
    x.map(p => (p._1, p._2 - valToSubtract(p._1))).filter(_._2 != 0)
  }

  /** Returns a list of all anagram sentences of the given sentence.
   *  
   *  An anagram of a sentence is formed by taking the occurrences of all the characters of
   *  all the words in the sentence, and producing all possible combinations of words with those characters,
   *  such that the words have to be from the dictionary.
   *
   *  The number of words in the sentence and its anagrams does not have to correspond.
   *  For example, the sentence `List("I", "love", "you")` is an anagram of the sentence `List("You", "olive")`.
   *
   *  Also, two sentences with the same words but in a different order are considered two different anagrams.
   *  For example, sentences `List("You", "olive")` and `List("olive", "you")` are different anagrams of
   *  `List("I", "love", "you")`.
   *  
   *  Here is a full example of a sentence `List("Yes", "man")` and its anagrams for our dictionary:
   *
   *    List(
   *      List(en, as, my),
   *      List(en, my, as),
   *      List(man, yes),
   *      List(men, say),
   *      List(as, en, my),
   *      List(as, my, en),
   *      List(sane, my),
   *      List(Sean, my),
   *      List(my, en, as),
   *      List(my, as, en),
   *      List(my, sane),
   *      List(my, Sean),
   *      List(say, men),
   *      List(yes, man)
   *    )
   *
   *  The different sentences do not have to be output in the order shown above - any order is fine as long as
   *  all the anagrams are there. Every returned word has to exist in the dictionary.
   *  
   *  Note: in case that the words of the sentence are in the dictionary, then the sentence is the anagram of itself,
   *  so it has to be returned in this list.
   *
   *  Note: There is only one anagram of an empty sentence.
   */
  
//  def sentenceAnagrams(sentence: Sentence): SentenceAnagrams = {
//    def getAnagramsForCombinations(combinations: Combinations):SentenceAnagrams = {
//      if(combinations.isEmpty) List()
//      else {
//	      val occurrence = combinations.head
//	      val previousAnagrams = getAnagramsForCombinations(combinations.tail)
//	      val wordsForOccurrence = dictionaryByOccurrences.getOrElse(occurrence, List()) // 'to', 'do'
//	      previousAnagrams.flatMap(sentence => wordsForOccurrence.map(word => word :: sentence))
//      }
//    }
//    getAnagramsForCombinations(combinations(sentenceOccurrences(sentence)))
//  }
  
  //sentenceOccurrences(List()) -> L
  def sentenceAnagrams(sentence: Sentence): List[Sentence] = {
    getAnagramsForOccurrences(sentenceOccurrences(sentence))
  }
  
  def getAnagramsForOccurrences(occurrences: Occurrences):List[Sentence] = {
	  val subOccurrencesList = combinations(occurrences)
	  subOccurrencesList.flatMap(getAnagramsForSubOccurrences(_, occurrences))
	}
  
  def getAnagramsForSubOccurrences(subOccurrences:Occurrences, occurrences:Occurrences):List[Sentence] = {
    val wordsForSuboccurrences = dictionaryByOccurrences.getOrElse(subOccurrences, List())
    val diff = subtract(occurrences, subOccurrences)
    if(diff.isEmpty) wordsForSuboccurrences.map(List(_))  //if the subtraction is empty, i return my first list with just the single wordv
    else {
      val previousAnagrams = getAnagramsForOccurrences(diff)
      if(previousAnagrams.isEmpty) previousAnagrams
      else wordsForSuboccurrences.flatMap(word => previousAnagrams.map(sentence => word :: sentence))
    }
  }
  
  /*
   * a2, b2, c1
   * 
   * a2, b2, c1
   * []
   * 
   * a2, b2 + c1
   */
  
  /*
   * start with a list of occurrences combinations(sentenceOccurrences(sentence))
   * for each occurences, get a list of words in the dictionary.
   *    none -> then this occurrences contributes no anagrams
   *    one -> this word might be part of an anagram. to be one, we would mix the word with anagrams from the remaining occurrences.
   */
  
  /*
   * def a(occurrences:Occurrences): List[Sentence] = {
      def b(subOccurrences:Occurrences):List[Sentence] = {
        val actualWordsForSubOccurrences = dictionaryByOccurrences.getOrElse(subOccurrences, List())
//        val remainingOccurrences = subtract(occurrences, subOccurrences)
//        actualWordsForSubOccurrences.flatMap(word => a(remainingOccurrences).map(word :: _))
        List(actualWordsForSubOccurrences)
      }
      combinations(occurrences).flatMap(b)
    }
    a(sentenceOccurrences(sentence))
    
   */

}
